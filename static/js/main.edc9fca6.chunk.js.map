{"version":3,"sources":["modules/todos.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","components/TodoTemplate.js","App.js","index.js"],"names":["CHANGE_INPUT","INSERT","TOGGLE","REMOVE","id","initialState","input","todos","text","checked","todosReducer","combineReducers","state","action","type","concat","todo","map","filter","TodoInsert","onChangeInput","onInsert","className","onSubmit","e","preventDefault","placeholder","value","onChange","target","TodoListItem","onRemove","onToggle","cn","onClick","TodoList","connect","changeInput","insert","toggle","remove","App","store","createStore","devToolsEnhancer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.edc9fca6.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\r\n\r\n//상태값이 변경되는 action을 정의\r\n//상태에 변화가 필요하다면 액션을 일으켜야한다.\r\n//액션은 객체로 표현되면 type필드를 반드시 가지고 있어야 한다.\r\n//액션타입은 대문자로 정의, 액션타입 = 모듈이름/액션이름\r\n\r\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT'; //인풋값을 변경함\r\nconst INSERT = 'todos/INSERT'; //새로운 todo를 등록함\r\nconst TOGGLE = 'todos/TOGGLE'; //todo를 체크/체크해제함\r\nconst REMOVE = 'todos/REMOVE'; //todo를 제거함\r\n\r\n//액션 생성 함수는 액션 객체를 만들어주느 함수이다. 화살표 함수로도 표현이 간으하다.\r\nexport const changeInput = input =>({\r\n    type : CHANGE_INPUT,\r\n    input\r\n});\r\n\r\nlet id = 4; //insert 가 호출 될 떄마다 1씩 더해집니다.\r\n\r\nexport const insert = value => ({\r\n    type : INSERT,\r\n    todo : {\r\n        id : id++, \r\n        text : value, \r\n        checked : false, \r\n    }\r\n});\r\n\r\nexport const toggle = id => ({\r\n    type : TOGGLE,\r\n    id\r\n});\r\n\r\nexport const remove = id => ({\r\n    type : REMOVE,\r\n    id\r\n})\r\n\r\nconst initialState = {\r\n    input : '',\r\n    todos : [\r\n        {\r\n            id: 1,\r\n            text : '리액트의 기초 알아보기',\r\n            checked : true,\r\n        },\r\n        {\r\n            id: 2,\r\n            text : '컴포넌트 스타일링 해 보기',\r\n            checked : true,\r\n        },\r\n        {\r\n            id: 3,\r\n            text : '일정 관리 앱 만들어 보기',\r\n            checked : false,\r\n        },\r\n    ],\r\n};\r\n\r\n//reducer 생성\r\n//리듀서는 state값을 변경.\r\n//앞서 정의한 상태값으로 초기화하고 액션에 의해 상태값을 변화시키는 내용이 작성\r\n//리듀서는 현재 상태와 액션 객체를 받아, 새로운 상태를 리턴하는 함수\r\nfunction todos(state = initialState, action) {\r\n    switch(action.type) {\r\n        case CHANGE_INPUT : \r\n            return {\r\n                ...state,\r\n                input : action.input\r\n            };\r\n        case INSERT : \r\n            return {\r\n                ...state,\r\n                todos : state.todos.concat(action.todo)\r\n            };\r\n        case TOGGLE : \r\n            return {\r\n                ...state,\r\n                todos : state.todos.map(todo =>\r\n                    todo.id ===action.id ? {...todo, checked: !todo.checked\r\n                    } : todo)\r\n            };\r\n        case REMOVE : \r\n            return {\r\n                ...state,\r\n                todos : state.todos.filter(todo => todo.id !== action.id)\r\n            };\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n//combineReducers({리듀서,리듀서})는 리듀서가 여러개일 경우 하나로 합칠때 사용\r\nconst todosReducer = combineReducers({todos});\r\nexport default todosReducer;","/* TodoInsert.js */\r\nimport React, {useState, useCallback} from 'react'\r\nimport {MdAdd} from 'react-icons/md'\r\nimport '../styles/TodoInsert.scss'\r\n\r\n//기존\r\n// function TodoInsert({onInsert}) {\r\n//     const [value, setValue] = useState('');\r\n\r\n//     const onChange = useCallback(e => {\r\n//         setValue(e.target.value);\r\n//     }, []);\r\n\r\n//     const onSubmit = useCallback(e => {\r\n//         onInsert(value);\r\n//         setValue('');\r\n//         e.preventDefault();\r\n//         //submit이벤트는 브라우저에서 새로고침을 발생시킨다\r\n//     }, [value]);\r\n\r\n//     return (\r\n//         <form className=\"TodoInsert\" onSubmit={onSubmit}>\r\n//             <input \r\n//                 placeholder=\"할 일을 입력하세요\" \r\n//                 value={value} \r\n//                 onChange={onChange}\r\n//             />\r\n//             <button type=\"submit\">\r\n//                 <MdAdd />\r\n//             </button>\r\n//         </form>\r\n//     )}\r\n\r\n//리덕스 변경\r\nconst TodoInsert = ({input, onChangeInput, onInsert}) =>{\r\n    const onChange = e => {\r\n        onChangeInput(e.target.value);\r\n    };\r\n\r\n    const onSubmit = e => {\r\n        onInsert(input);\r\n        e.preventDefault();\r\n        onChangeInput('');\r\n    }\r\n    \r\n    return (\r\n        <form className=\"TodoInsert\" onSubmit={onSubmit}>\r\n            <input \r\n                placeholder=\"할 일을 입력하세요\"  \r\n                //기존\r\n                //value={value}\r\n                //리덕스변경\r\n                value={input}\r\n                onChange={onChange}\r\n            />\r\n            <button type=\"submit\">\r\n                <MdAdd />\r\n            </button>\r\n        </form>\r\n    )\r\n};\r\nexport default TodoInsert;","/*TodoListItem.js*/\r\nimport React from 'react'\r\nimport {MdCheckBox, MdRemoveCircleOutline, MdCheckBoxOutlineBlank} from 'react-icons/md';\r\nimport cn from 'classnames';//조건부 스타일링\r\nimport '../styles/TodoListItem.scss'\r\n\r\nfunction TodoListItem({todo, onRemove, onToggle}) {\r\n    const{id, text, checked} = todo;\r\n    return (\r\n        <div className=\"TodoListItem\">\r\n            <div className={cn('Checkbox', {checked})} onClick={()=>{onToggle(id)}}>\r\n                {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n                <div className=\"text\">{text}</div>\r\n            </div>\r\n            <div className=\"remove\" onClick={()=>{onRemove(id)}}><MdRemoveCircleOutline /></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoListItem;\r\n","/* TodoList.js */\r\nimport React from 'react'\r\nimport TodoListItem from './TodoListItem';\r\nimport \"../styles/TodoList.scss\"\r\n\r\nfunction TodoList({todos, onRemove, onToggle}) {\r\n    return (\r\n        <div className=\"TodoList\">\r\n            {todos.map(todo => (\r\n                <TodoListItem \r\n                    todo={todo} \r\n                    key={todo.id} \r\n                    onRemove={onRemove} \r\n                    onToggle={onToggle}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n","/* TodoTemplate.js */\r\nimport React from 'react'\r\nimport '../styles/TodoTemplate.scss';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {changeInput, insert, toggle, remove} from '../modules/todos';\r\nimport TodoInsert from './TodoInsert';\r\nimport TodoList from './TodoList';\r\n\r\n//기존...\r\n// childrend => app.js에 선언한 insert, list, 기타 선언한 태그내용들\r\n//function TodoTemplate({children}) {\r\n    // return (\r\n    //     <div className=\"TodoTemplate\">\r\n    //         <div className=\"app-title\">일정 관리</div>\r\n    //         <div className=\"content\">{children}</div>\r\n    //     </div>\r\n    // )\r\n//}\r\n\r\n//export default TodoTemplate;\r\n\r\n\r\n//리덕스 변경\r\nconst TodoTemplate = ({input, todos, changeInput, insert, toggle, remove}) => {\r\n    return (\r\n        <div className=\"TodoTemplate\">\r\n            <div className=\"app-title\">일정 관리</div>\r\n            <div className=\"content\">\r\n                <TodoInsert input={input} onInsert={insert} onChangeInput={changeInput} />\r\n                <TodoList todos={todos} onRemove={remove} onToggle={toggle} />\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n//connect() 함수로 연결된 컴포넌트에 변경된 스토어의 데이터를 전파하여 동기화함.\r\nexport default connect(\r\n    ({todos}) => ({\r\n        input : todos.input,\r\n        todos : todos.todos,\r\n    }), \r\n    {changeInput, insert, toggle, remove},\r\n)(TodoTemplate);\r\n\r\n//export default connect(\r\n//     state => ({\r\n//         input : state.todos.input,\r\n//         todos : state.todos.todos,\r\n//     }),\r\n//     dispatch => ({\r\n//         changeInput : () => dispatch(changeInput()),\r\n//디스패치 = 가게로 따지면 종업원 역할.\r\n//액션을 디스패치 하기 위해 액션생성함수를 불러와서 액션객체를 만들고 디스패치 한다.\r\n//이때 각 액션 생성 함수를 호출하고 디스패치로 감싸야 한다.\r\n//         insert: () => dispatch(insert()),\r\n//         toggle: () => dispatch(toggle()),\r\n//         remove: () => dispatch(remove()),\r\n//     }),\r\n// )(TodoTemplate);\r\n","// import React,{useState, useEffect, useRef, useCallback, useMemo} from 'react';\nimport React from 'react';\nimport './App.css';\nimport TodoTemplate from './components/TodoTemplate';\n// import TodoInsert from './components/TodoInsert';\n// import TodoList from './components/TodoList';\n\nfunction App() {\n  // const [todos, setTodos] = useState([\n  //   {\n  //     id: 1,\n  //     text: '운동하기',\n  //     checked : true,\n  //   },\n  //   {\n  //     id: 2,\n  //     text: '요리하기',\n  //     checked : true,\n  //   },\n  //   {\n  //     id: 3,\n  //     text: '학원가기',\n  //     checked : false,\n  //   }\n  // ]);\n\n  // const nextId = useRef(4);//ref를 사용해서 변수 담기\n\n  // const onInsert = useCallback( value => {\n  //   const todo = {\n  //     id : nextId.current,\n  //     text : value,\n  //     checked : false,\n  //   };\n  //   setTodos(todos.concat(todo));\n  //   nextId.current += 1;\n  // },[todos]);\n\n  // const onRemove = useCallback( id => {\n  //   setTodos(todos.filter(todo => todo.id !== id));\n  // }, [todos]);\n\n  // const onToggle = useCallback( id => {\n  //   setTodos(todos.map(todo => todo.id === id ? {...todo, checked: !todo.checked} : todo));\n  // }, [todos]);\n\n  return (\n    // <TodoTemplate>\n    //   <TodoInsert onInsert={onInsert} />\n    //   <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\n    //   <div>Todo App을 만듭니다</div>\n    // </TodoTemplate>\n\n    <TodoTemplate/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport {devToolsEnhancer} from 'redux-devtools-extension';\nimport todosReducer from './modules/todos';\n\n//Store생성\n//하나의 프로젝트는 하나의 스토어만 가질 수 있다.\n//하나의 스토어에서는 하나의 리듀서만 사용\n//크롬 웹스토어에서 Redux DevTools 설치 -> F12 -> Redux -> state\nconst store = createStore(todosReducer, devToolsEnhancer());\n\nReactDOM.render(\n  // <App />,\n  // document.getElementById('root')\n\n  //provider 사용\n  //Provider 스토어 데이터 공급자 : App 컴포넌트에서 스토어를 사용할수 있다. props로 store를 전달.\n  <Provider store={store}>\n    <App />\n  </Provider>,document.getElementById('root')\n);"],"sourceRoot":""}